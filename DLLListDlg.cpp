// DLLListDlg.cpp : implementation file
//

#include "stdafx.h"
#include "infoview.h"
#include "DLLListDlg.h"

#include "./InfoHook/HHook.h"
#include "InfoUtil.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CDLLListDlg dialog

CDLLListDlg::CDLLListDlg(HWND hwnd, CWnd* pParent /*=NULL*/)
	: CDialog(CDLLListDlg::IDD, pParent),
	m_selectedWindow(hwnd)
{
	//{{AFX_DATA_INIT(CDLLListDlg)
	//}}AFX_DATA_INIT
	m_bInitCalled = FALSE;
}


void CDLLListDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CDLLListDlg)
	DDX_Control(pDX, IDC_DLL_LIST, m_ListBox);
	//}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CDLLListDlg, CDialog)
	//{{AFX_MSG_MAP(CDLLListDlg)
	ON_WM_SIZE()
	ON_WM_GETMINMAXINFO()
	ON_WM_DESTROY()
	//}}AFX_MSG_MAP
	ON_BN_CLICKED(IDC_COPYLIST, OnCopylist)
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CDLLListDlg message handlers

BOOL CDLLListDlg::OnInitDialog() 
{
	CDialog::OnInitDialog();
	m_DllListSizer.init(*this);
	m_bInitCalled = TRUE;

	if ( (m_selectedWindow) && (::IsWindow(m_selectedWindow)) )
	{
		InstallGetMsgHook(m_selectedWindow, m_ListBox.GetSafeHwnd());
	}
	return TRUE;  // return TRUE unless you set the focus to a control
	              // EXCEPTION: OCX Property Pages should return FALSE
}

void CDLLListDlg::OnOK() 
{
	RemoveGetMsgHook();
	CDialog::OnOK();
}

void CDLLListDlg::OnSize(UINT nType, int cx, int cy) 
{
	CDialog::OnSize(nType, cx, cy);
	if (TRUE == m_bInitCalled)
	{
		m_DllListSizer.resize(*this);
	}
}

void CDLLListDlg::OnGetMinMaxInfo(MINMAXINFO FAR* lpMMI) 
{
	if (TRUE == m_bInitCalled)
	{
		m_DllListSizer.getMinMaxInfo(lpMMI);
	}
	CDialog::OnGetMinMaxInfo(lpMMI);
}

void CDLLListDlg::OnDestroy() 
{
	CDialog::OnDestroy();
	RemoveGetMsgHook();	
}

void CDLLListDlg::OnCopylist()
{
	CString str, str2, str3;
	int nBufferLength;
	for (int i=0; i < m_ListBox.GetCount(); i++)
	{
		nBufferLength = m_ListBox.GetTextLen( i );
		m_ListBox.GetText( i, str.GetBuffer(nBufferLength) );
		str.ReleaseBuffer();

		str2.Format(_T("%s\r\n"), str.GetBuffer(0));
		str3 += str2;
	}
	if ( false == CopyTextToClipBoard(str3) )
		return;

	if ( IDYES == ::MessageBox(this->m_hWnd, "The contents have been copied to clipboard successfully.\nDo you want to open clipboard contents in default editor?", "Copy", MB_YESNO | MB_ICONINFORMATION ))
	{
		CString strTempFile;
		if ( true == CreateTemporaryTextFile(strTempFile))
		{
			CFile tmpFile(strTempFile, CFile::modeWrite);
			InsertHeader(tmpFile);
			tmpFile.Write(str3.GetBuffer(), str3.GetLength());
			str3.ReleaseBuffer();
			tmpFile.Close();
			ExecuteTextFile(strTempFile);
		}
	}
}

void CDLLListDlg::InsertHeader(CFile& file) const
{
	COleDateTime t = COleDateTime::GetCurrentTime();
	CString strDateTime = t.Format(_T("%A, %B %d, %Y, %I:%M:%S %p"));

	CString strHeader =  _T("Generated by InfoView, Copyright (c) reserved 2002. ") + strDateTime + _T("\r\n");
	int nHeaderLength = strHeader.GetLength();
	for ( int i = 0; i < nHeaderLength; i++ )
		strHeader += _T("=");

	strHeader += _T("\r\n");

	file.Write(strHeader.GetBuffer(), strHeader.GetLength());
	strHeader.ReleaseBuffer();
}

bool CDLLListDlg::CopyTextToClipBoard(CString& str)
{
	HANDLE		hMem;
	LPSTR		lpStr;
	HANDLE handle = NULL;

	TRY
	{
		hMem = GlobalAlloc(GHND, str.GetLength() + 1);
		lpStr = (LPSTR) GlobalLock(hMem);
		lstrcpy(lpStr, str);
		GlobalUnlock(hMem);
		OpenClipboard();
		EmptyClipboard();
		handle = SetClipboardData (CF_TEXT, hMem);
		CloseClipboard();
	}
	CATCH(CException, pEx)
	{
		ShowLastError("Clipboard");
		return false;
	}
	END_CATCH

	if ( handle == NULL ) 
	{
		ShowLastError("Clipboard");
		return false;	
	}

	return true;
}

bool CDLLListDlg::CreateTemporaryTextFile(CString& strFile ) const
{
	TRY
	{
		TCHAR filePath[1024];
		TCHAR folderPath[1024];
		
		::ZeroMemory(filePath, sizeof(filePath)/sizeof(TCHAR));
		::ZeroMemory(folderPath, sizeof(folderPath)/sizeof(TCHAR));

		// get the Windows default temp path & temp file name
		::GetTempPath(sizeof(folderPath), folderPath);
		int nRet = ::GetTempFileName(folderPath, "inf", 0, filePath);
		if (nRet == 0) 
		{
			ShowLastError("Create File");
			return false;
		}

		CString strTempFileFullPath = filePath;
		strTempFileFullPath.Replace(".tmp", ".txt");

		// rename the extension from ".tmp" to ".txt"
		nRet = ::MoveFile(filePath, strTempFileFullPath);
		if (nRet == 0) 
		{
			ShowLastError("MoveFile");
			return false;
		}
		strFile = strTempFileFullPath;
		return true;
	}
	CATCH(CException, pEx)
	{
		ShowLastError("Error");
		return false;
	}
	END_CATCH
}

void CDLLListDlg::ExecuteTextFile(const CString strFileToOpen) const
{
	ShellExecute( NULL, "open", strFileToOpen, NULL, NULL, SW_SHOWNORMAL );
}